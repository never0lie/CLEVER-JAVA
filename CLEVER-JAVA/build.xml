<project name="CLEVER-JAVA" default="build" basedir=".">

  <property file="${user.home}/.jpf/site.properties"/>

  <fail unless="jpf-core">no jpf-core location set, check site.properties</fail>
  <fail unless="jpf-symbc">no jpf-symbc location set, check site.properties</fail>
  <fail unless="jpf-shadow">no jpf-shadow location set, check site.properties</fail>

  <!-- get the dependent project properties -->
  <property file="${jpf-core}/jpf.properties"/>
  <property file="${jpf-symbc}/jpf.properties"/>
  <property file="${jpf-shadow}/jpf.properties"/>

  <property name="src_level"     value="8"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>

  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <!-- we don't have these
    <pathelement location="build/peers"/>
    -->
    <fileset dir=".">
        <include name="lib/*.jar"/>
    </fileset>

    <!-- add projects we depend on -->
    <pathelement path="${jpf-core.native_classpath}"/>
  	<pathelement path="${jpf-symbc.native_classpath}"/>
    <pathelement path="${jpf-shadow.native_classpath}"/>
  </path>

  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>


    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/annotations" type="dir" property="have_annotations"/>
    <available file="src/peers"       type="dir" property="have_peers"/>
    <available file="src/classes"     type="dir" property="have_classes"/>
    <available file="src/tests"       type="dir" property="have_tests"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

    <condition property="have_jvm_code">
      <or>
        <isset property="have_main"/>
        <isset property="have_peers"/>
      </or>
    </condition>

    <condition property="have_jpf_code">
      <or>
        <isset property="have_classes"/>
        <isset property="have_annotations"/>
      </or>
    </condition>


    <!-- optionally set the required artifacts here
    <fail unless="have_main">no src/main</fail>
    <fail unless="have_annotations">no src/annotations</fail>
    <fail unless="have_peers">no src/peers</fail>
    <fail unless="have_classes">no src/classes</fail>
    <fail unless="have_tests">no src/tests</fail>
    <fail unless="have_examples">no src/examples</fail>
    -->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->

  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotations,-compile-main,-compile-peers,-compile-classes,-compile-tests,-compile-examples"
          description="compile all JPF core sources" >
  </target>

  <target name="-compile-annotations" if="have_annotations">
    <mkdir dir="build/annotations"/>
    <javac srcdir="src/annotations" destdir="build/annotations" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpath=""/>
  </target>

  <target name="-compile-main" if="have_main">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
    <mkdir dir="build/peers"/>
    <javac srcdir="src/peers" destdir="build/peers" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <target name="-compile-classes" if="have_classes" depends="-compile-annotations,-compile-main" >
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" >
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-tests" if="have_tests" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/tests"/>
    <javac srcdir="src/tests" destdir="build/tests" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" >
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
        <pathelement location="build/classes"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>

  <!-- ======================= MISC SECTION ================================ -->

  <!-- build jars -->
  <target name="build" depends="compile,-jar-jvm,-jar-jpf,-jar-annotations"
        description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="-jar-jvm" if="have_jvm_code">
    <jar jarfile="build/${ant.project.name}.jar" whenmanifestonly="skip">
      <fileset dir="build/main" erroronmissingdir="false"/>
      <fileset dir="build/peers" erroronmissingdir="false"/>
      <manifest>
        <attribute name="Main-Class" value="org.softwaretesting.Main"/>
      </manifest>
    </jar>
  </target>

  <target name="-jar-jpf" if="have_jpf_code">
    <jar jarfile="build/${ant.project.name}-classes.jar" whenmanifestonly="skip">
      <fileset dir="build/classes" erroronmissingdir="false"/>
      <fileset dir="build/annotations" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-annotations" if="have_annotations">
    <!-- optional jar that contains annotations to be used in non-JPF dependent apps -->
    <jar jarfile="build/${ant.project.name}-annotations.jar" whenmanifestonly="skip">
      <fileset dir="build/annotations" erroronmissingdir="false"/>
    </jar>
  </target>

   <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="build" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>

  <!-- <target name="run" description="Run the jar file" depends="jar" >
    <java jar="build/CLEVER-JAVA.jar" fork="true" classpathref="lib.path"></java>
  </target> -->

  <!-- <target name="hello" description="build clever-java">
    <echo>hello world for clever-java</echo>
  </target>

  <target name="clean">
    <delete dir="build"/>
  </target> -->

  <!-- <target name="compile">
    <mkdir dir="build/classes"/>
    <javac srcdir="src" destdir="build/classes"/>
  </target> -->

  <!-- <target name="jar">
    <mkdir dir="build/jar"/>
    <jar destfile="build/jar/HelloWorld.jar" basedir="build/classes">
      <manifest>
        <attribute name="Main-Class" value="org.softwaretesting.Main"/>
      </manifest>
    </jar>
  </target> -->

  <target name="run">
    <java classname="org.softwaretesting.Main" fork="true"  classpath="build/CLEVER_JAVA.jar" classpathref="lib.path"/>
  </target>

</project>

<!-- java -cp "jpf-shadow/build/jpf-shadow.jar:CLEVER-JAVA/build/CLEVER-JAVA.jar" org.softwaretesting.Main -->